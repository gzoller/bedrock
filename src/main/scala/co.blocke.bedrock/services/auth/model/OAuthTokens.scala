package co.blocke.bedrock
package services
package auth
package model

import zio.*
import zio.json.*
import java.time.Instant

/**
  * Each provider must provide an accessToken and a refreshToken. The bedrockAccessToken (JWT) will
  * be generated by Bedrock and used to access Bedrock APIs.
  * 
  * If Bedrock is the OAuth provider, the extAccessToken and extRefreshToken will be None.
  */
final case class OAuthTokens(
  extExpiresTime: Option[Instant], // provider's token expiration time
  extAccessToken: Option[String],  // provider's token (used to access provider's APIs) -- maybe JWT/maybe not
  extRefreshToken: Option[String],
  // We don't include access token as this is cached separately by sessionId
  bedrockRefreshToken: String      // JWT refresh token for Bedrock APIs
):
  def isExtExpired(now: Instant): Boolean = extExpiresTime.exists(_.isBefore(now)) 

object OAuthTokens:
  given JsonCodec[OAuthTokens] = DeriveJsonCodec.gen[OAuthTokens]
