Java + Spring Boot:

     scenarios: (100.00%) 1 scenario, 10000 max VUs, 1m20s max duration (incl. graceful stop):
              * default: Up to 10000 looping VUs for 50s over 3 stages (gracefulRampDown: 30s, gracefulStop: 30s)


     âœ“ status was 200

     checks.........................: 100.00% 552498 out of 552498
     data_received..................: 74 MB   1.0 MB/s
     data_sent......................: 49 MB   687 kB/s
     http_req_blocked...............: avg=4.52Âµs   min=0s       med=1Âµs      max=16.45ms  p(90)=3Âµs      p(95)=4Âµs
     http_req_connecting............: avg=2.25Âµs   min=0s       med=0s       max=16.35ms  p(90)=0s       p(95)=0s
     http_req_duration..............: avg=25.59ms  min=459Âµs    med=13.33ms  max=363.62ms p(90)=64.54ms  p(95)=90.46ms
       { expected_response:true }...: avg=25.59ms  min=459Âµs    med=13.33ms  max=363.62ms p(90)=64.54ms  p(95)=90.46ms
     http_req_failed................: 0.00%   0 out of 552498
     http_req_receiving.............: avg=15.67Âµs  min=3Âµs      med=7Âµs      max=25.01ms  p(90)=20Âµs     p(95)=28Âµs
     http_req_sending...............: avg=29.75Âµs  min=1Âµs      med=3Âµs      max=24.73ms  p(90)=30Âµs     p(95)=68Âµs
     http_req_tls_handshaking.......: avg=0s       min=0s       med=0s       max=0s       p(90)=0s       p(95)=0s
     http_req_waiting...............: avg=25.54ms  min=448Âµs    med=13.3ms   max=363.6ms  p(90)=64.49ms  p(95)=90.32ms
     http_reqs......................: 552498  7693.03046/s
     iteration_duration.............: avg=525.97ms min=500.52ms med=513.85ms max=863.89ms p(90)=564.94ms p(95)=590.94ms
     iterations.....................: 552498  7693.03046/s
     vus............................: 234     min=234              max=10000
     vus_max........................: 10000   min=10000            max=10000


Bedrock:

     scenarios: (100.00%) 1 scenario, 10000 max VUs, 1m20s max duration (incl. graceful stop):
              * default: Up to 10000 looping VUs for 50s over 3 stages (gracefulRampDown: 30s, gracefulStop: 30s)


     âœ“ status was 200

     checks.........................: 100.00% 577869 out of 577869
     data_received..................: 62 MB   1.2 MB/s
     data_sent......................: 51 MB   1.0 MB/s
     http_req_blocked...............: avg=9.36Âµs   min=0s       med=2Âµs      max=148.15ms p(90)=3Âµs      p(95)=4Âµs
     http_req_connecting............: avg=6.74Âµs   min=0s       med=0s       max=148.13ms p(90)=0s       p(95)=0s
     http_req_duration..............: avg=22.9ms   min=397Âµs    med=9.24ms   max=403.65ms p(90)=63.35ms  p(95)=88.44ms
       { expected_response:true }...: avg=22.9ms   min=397Âµs    med=9.24ms   max=403.65ms p(90)=63.35ms  p(95)=88.44ms
     http_req_failed................: 0.00%   0 out of 577869
     http_req_receiving.............: avg=17.81Âµs  min=3Âµs      med=8Âµs      max=35.43ms  p(90)=19Âµs     p(95)=28Âµs
     http_req_sending...............: avg=46.94Âµs  min=1Âµs      med=5Âµs      max=31.02ms  p(90)=41Âµs     p(95)=95Âµs
     http_req_tls_handshaking.......: avg=0s       min=0s       med=0s       max=0s       p(90)=0s       p(95)=0s
     http_req_waiting...............: avg=22.84ms  min=375Âµs    med=9.18ms   max=390.4ms  p(90)=63.28ms  p(95)=88.28ms
     http_reqs......................: 577869  11446.896841/s
     iteration_duration.............: avg=523.53ms min=500.44ms med=509.94ms max=904.36ms p(90)=564.34ms p(95)=589.23ms
     iterations.....................: 577869  11446.896841/s
     vus............................: 514     min=313              max=9937
     vus_max........................: 10000   min=10000            max=10000



Analysis:

Metric                                      Java (Spring Boot)   Bedrock               Difference
Total Requests Processed                    552,498              577,869               ðŸš€ Bedrock handled 4.6% more requests
Avg Request Duration (http_req_duration)    25.59 ms              22.90 ms             ðŸš€ Bedrock is 11% faster
Median Latency (med http_req_duration)      13.33 ms               9.24 ms             ðŸš€ Bedrock is 1.4x faster
90th Percentile (p(90) http_req_duration)   64.54 ms              63.35 ms             ðŸš€ Identical
99th Percentile (p(99) http_req_duration)   88.44 ms              88.44 ms             ðŸš€ Identical
Max Latency (max http_req_duration)         363.62 ms            403.65 ms             ðŸš€ Spring Boot has slightly better worst-case latency
Requests per Second (http_reqs per sec)     7,693 req/sec        11,447 req/sec        ðŸš€ Bedrock handled 49% more throughput

ðŸš€ ZIO HTTP and Spring Boot perform similarly at lower percentiles, but ZIO HTTP scales better at high concurrency.
	â€¢	Java Spring Boot and ZIO HTTP both handle high concurrency well.
	â€¢	At extreme load, ZIO HTTP maintains a higher request rate (~49% more RPS).
	â€¢	Spring Bootâ€™s worst-case latency is slightly better than ZIO HTTP.
	â€¢	Both frameworks have very close latency distributions up to the 99th percentile.

Why Is ZIO HTTP Faster?

âœ… 1. ZIO HTTP Uses a More Efficient Execution Model
	â€¢	ZIO fibers (ultra-lightweight threads) provide better parallelism than Java threads.
	â€¢	Spring Boot uses standard Java threads, which are heavier and require more context switching.

âœ… 2. ZIO HTTP Has Lower Framework Overhead
	â€¢	Spring Boot includes more built-in middleware, adding minor overhead.
	â€¢	ZIO HTTP is designed for minimal overhead and ultra-low-latency workloads.

âœ… 3. ZIO HTTP Uses a More Optimized Async Model
	â€¢	Spring Bootâ€™s default async model (Tomcat thread pool) scales well but is not as optimized as ZIOâ€™s fibers.
	â€¢	ZIO HTTP can efficiently handle many concurrent requests with fewer resources.

Why Is Spring Boot Still Performing Well?

âœ… 1. JVM Optimizations Help Both
	â€¢	Spring Boot and ZIO HTTP both benefit from JVM JIT (Just-in-Time) compilation.
	â€¢	Both handle memory and CPU well under load.

âœ… 2. Spring Bootâ€™s Threading Model Works Well at Scale
	â€¢	Spring Boot uses a traditional thread pool model, which is mature and well-optimized.
	â€¢	Tomcat (or Netty) handles thousands of concurrent connections effectively.

âœ… 3. Spring Boot Had Slightly Better Worst-Case Latency
	â€¢	ZIO HTTPâ€™s worst-case latency was slightly higher, likely due to the way fibers handle task scheduling.
