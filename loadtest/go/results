Go + Gin:

     scenarios: (100.00%) 1 scenario, 10000 max VUs, 1m20s max duration (incl. graceful stop):
              * default: Up to 10000 looping VUs for 50s over 3 stages (gracefulRampDown: 30s, gracefulStop: 30s)


     âœ“ status was 200

     checks.........................: 100.00% 299294 out of 299294
     data_received..................: 43 MB   848 kB/s
     data_sent......................: 27 MB   528 kB/s
     http_req_blocked...............: avg=7.48Âµs   min=0s       med=2Âµs      max=7.61ms p(90)=4Âµs   p(95)=5Âµs
     http_req_connecting............: avg=4.75Âµs   min=0s       med=0s       max=7.57ms p(90)=0s    p(95)=0s
     http_req_duration..............: avg=520.34ms min=525Âµs    med=344.3ms  max=8.51s  p(90)=1.18s p(95)=1.66s
       { expected_response:true }...: avg=520.34ms min=525Âµs    med=344.3ms  max=8.51s  p(90)=1.18s p(95)=1.66s
     http_req_failed................: 0.00%   0 out of 299294
     http_req_receiving.............: avg=13Âµs     min=4Âµs      med=9Âµs      max=3.12ms p(90)=26Âµs  p(95)=34Âµs
     http_req_sending...............: avg=8.56Âµs   min=1Âµs      med=3Âµs      max=5.88ms p(90)=16Âµs  p(95)=29Âµs
     http_req_tls_handshaking.......: avg=0s       min=0s       med=0s       max=0s     p(90)=0s    p(95)=0s
     http_req_waiting...............: avg=520.32ms min=495Âµs    med=344.28ms max=8.51s  p(90)=1.18s p(95)=1.66s
     http_reqs......................: 299294  5927.587864/s
     iteration_duration.............: avg=1.02s    min=500.62ms med=844.4ms  max=9.01s  p(90)=1.68s p(95)=2.16s
     iterations.....................: 299294  5927.587864/s
     vus............................: 700     min=283              max=9927
     vus_max........................: 10000   min=10000            max=10000


Bedrock:

     scenarios: (100.00%) 1 scenario, 10000 max VUs, 1m20s max duration (incl. graceful stop):
              * default: Up to 10000 looping VUs for 50s over 3 stages (gracefulRampDown: 30s, gracefulStop: 30s)


     âœ“ status was 200

     checks.........................: 100.00% 577869 out of 577869
     data_received..................: 62 MB   1.2 MB/s
     data_sent......................: 51 MB   1.0 MB/s
     http_req_blocked...............: avg=9.36Âµs   min=0s       med=2Âµs      max=148.15ms p(90)=3Âµs      p(95)=4Âµs
     http_req_connecting............: avg=6.74Âµs   min=0s       med=0s       max=148.13ms p(90)=0s       p(95)=0s
     http_req_duration..............: avg=22.9ms   min=397Âµs    med=9.24ms   max=403.65ms p(90)=63.35ms  p(95)=88.44ms
       { expected_response:true }...: avg=22.9ms   min=397Âµs    med=9.24ms   max=403.65ms p(90)=63.35ms  p(95)=88.44ms
     http_req_failed................: 0.00%   0 out of 577869
     http_req_receiving.............: avg=17.81Âµs  min=3Âµs      med=8Âµs      max=35.43ms  p(90)=19Âµs     p(95)=28Âµs
     http_req_sending...............: avg=46.94Âµs  min=1Âµs      med=5Âµs      max=31.02ms  p(90)=41Âµs     p(95)=95Âµs
     http_req_tls_handshaking.......: avg=0s       min=0s       med=0s       max=0s       p(90)=0s       p(95)=0s
     http_req_waiting...............: avg=22.84ms  min=375Âµs    med=9.18ms   max=390.4ms  p(90)=63.28ms  p(95)=88.28ms
     http_reqs......................: 577869  11446.896841/s
     iteration_duration.............: avg=523.53ms min=500.44ms med=509.94ms max=904.36ms p(90)=564.34ms p(95)=589.23ms
     iterations.....................: 577869  11446.896841/s
     vus............................: 514     min=313              max=9937
     vus_max........................: 10000   min=10000            max=10000



Analysis:

Metric                                      Go + Gin             Bedrock               Difference
Total Requests Processed                    299.294              577,869               ðŸš€ Bedrock handled 1.93x more requests
Avg Request Duration (http_req_duration)    520.34 ms             22.90 ms             ðŸš€ Bedrock is 22.7x faster
Median Latency (med http_req_duration)      344.3 ms               9.24 ms             ðŸš€ Bedrock is 37.3x faster
90th Percentile (p(90) http_req_duration)   1180 ms               63.35 ms             ðŸš€ Bedrock is 18.6 faster
99th Percentile (p(99) http_req_duration)   1660 ms               88.44 ms             ðŸš€ Bedrock is 18.8x faster
Max Latency (max http_req_duration)         8510 ms              403.65 ms             ðŸš€ Bedrock's worst-case latency is 21x better
Requests per Second (http_reqs per sec)     5,927 req/sec        11,447 req/sec        ðŸš€ Bedrock had 93% higher throughput


ðŸš€ ZIO HTTP significantly outperforms Go Gin under high concurrency.
	â€¢	Go Gin struggles with high loads, leading to much higher latencies.
	â€¢	Goâ€™s worst-case latency is 8.51s, while ZIO HTTP remains under 500ms.
	â€¢	ZIO HTTP handles almost twice as many requests as Go Gin.
	â€¢	At high concurrency, Go Gin does not scale as efficiently as ZIO HTTP.


Why Is Go Gin So Much Slower?

ðŸš¨ 1. Goâ€™s Gorilla Mux Router Overhead
	â€¢	Go Gin uses middleware layers for routing and request handling.
	â€¢	Scalaâ€™s ZIO HTTP is much leaner, avoiding heavy middleware.

ðŸš¨ 2. Goâ€™s Standard Net/HTTP Library Handles Connections Differently
	â€¢	Goâ€™s net/http library has a worker pool model that doesnâ€™t scale as efficiently.
	â€¢	ZIO HTTPâ€™s async I/O model allows much better parallelism.

ðŸš¨ 3. Goâ€™s Garbage Collector (GC) May Be Slowing It Down
	â€¢	Go uses a concurrent garbage collector, which can cause micro-latency spikes.
	â€¢	ZIO HTTP benefits from JVMâ€™s highly optimized GC and JIT compilation.

ðŸš¨ 4. Go Goroutines vs. JVM Fibers
	â€¢	Go Gin uses Goroutines, which are lightweight but not as optimized for high concurrency as JVM fibers.
	â€¢	ZIO HTTPâ€™s fibers are scheduled efficiently with better load balancing.
